@inject IFileReaderService _fileReader

<div class="input-group mb-3">
    <div class="input-group-prepend">
        <span class="input-group-text" id="inputgroupFile">@Label</span>
    </div>
    <div class="custom-file">
        <input 
            type="file" 
            class="custom-file-input" 
            id="inputGroupFileField" 
            aria-describedby="inputgroupFile"
            @ref="_inputElement"
            @onchange="OnImageSelectedHandler"
            accept=".jpg,.jpeg,.png" />
        <label class="custom-file-label" for="inputGroupFileField">@_fileName</label>
    </div>
</div>
<div>
    @if (_imageBase64 is not null)
    {
        <div>
            <div class="my-3 mr-3">
                <img src="data:image/jpeg;base64,@_imageBase64" class="img-thumbnail" width="500"/>
            </div>
        </div>
    }
    @if (ImageUrl is not null)
    {
        <div>
            <div class="my-3 mr-3">
                <img src="@ImageUrl" class="img-thumbnail" width="200"/>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string Label { get; set; } = "Image";
    [Parameter] public string ImageUrl { get; set; }
    [Parameter] public EventCallback<string> OnImageFileSelected { get; set; }

    ElementReference _inputElement;
    string _imageBase64;
    string _fileName = "Choose file...";

    async Task OnImageSelectedHandler()
    {
        foreach (var item in await _fileReader.CreateReference(_inputElement).EnumerateFilesAsync())
        {
            await using var ms = await item.CreateMemoryStreamAsync(4 * 1024);
            
            var fileInfo = await item.ReadFileInfoAsync();
            _fileName = fileInfo.Name;

            var msLength = ms.Length;
            var byteImage = new byte[msLength];

            await ms.ReadAsync(byteImage, 0, (int)msLength);
            _imageBase64 = Convert.ToBase64String(byteImage);

            await OnImageFileSelected.InvokeAsync(_imageBase64);

            ImageUrl = null;
            StateHasChanged();
        }
    }
}
