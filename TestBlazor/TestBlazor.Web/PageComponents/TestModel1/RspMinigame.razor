@implements IDisposable

<div class="row text-center">
    <div class="col">
        <h1 class="text-success">RSP</h1>
    </div>
</div>

<div class="row text-right">
    <div class="col">
        <h1>Points: @_points</h1>
    </div>
</div>

@if (!string.IsNullOrWhiteSpace(_gameResultMessage))
{
    <div class="row">
        <div class="col text-center alert alert-@_resultStyle">
            <h1>@_gameResultMessage</h1>
        </div>
    </div>
}

<div class="row text-center">
    <div class="col mb-5 justify-content-center">
        <img src="@_opponent.Image" class="general-image"/>
    </div>
</div>

<div class="row text-center">
    <div class="col mb-5 justify-content-center">
        <button class="btn btn-primary" @onclick="ResetGame">New Game</button>
    </div>
</div>

<div class="row text-center justify-content-around">
    @foreach (var item in _games)
    {
        <img src="@item.Image" class="general-image hovered-image" @onclick="() => SelectingHandler(item)"/>
    }
</div>

@code
{
    readonly List<GameHandler> _games = new List<GameHandler>()
    {
        new()
        {
            Choose = RspOptions.Paper, 
            LooseCondition = RspOptions.Scissors, 
            WinCondition = RspOptions.Rock,
            Image = "./img/paper.png"
        },
        new()
        {
            Choose = RspOptions.Rock, 
            LooseCondition = RspOptions.Paper, 
            WinCondition = RspOptions.Scissors,
            Image = "./img/rock.png"
        },
        new()
        {
            Choose = RspOptions.Scissors, 
            LooseCondition = RspOptions.Rock, 
            WinCondition = RspOptions.Paper,
            Image = "./img/scissors.png"
        },
    };

    Timer _timer;
    GameHandler _opponent;
    Random _rnd;
    int _imageIndex = 0;
    string _gameResultMessage = string.Empty;
    string _resultStyle = string.Empty;
    int _points = 0;

    protected override void OnInitialized()
    {
        _opponent = _games[0];
        _rnd = new Random(DateTime.Now.Millisecond);

        _timer = new Timer();
        _timer.Interval = 100;
        _timer.Elapsed += ElapsedTimer;
        _timer.Start();
    }

    async void ElapsedTimer(object sender, ElapsedEventArgs args)
    {
        _imageIndex = _rnd.Next(0, _games.Count);
        _opponent = _games[_imageIndex];
        await InvokeAsync(StateHasChanged);
    }

    void SelectingHandler(GameHandler game)
    {
        _timer.Stop();
        

        var gameResult = game.GameResult(_opponent);

        switch (gameResult)
        {
            case GameState.Victory:
                _gameResultMessage = "YOU WIN!";
                _resultStyle = "success";
                _points++;
                break;
            case GameState.Loss:
                _gameResultMessage = "YOU LOSE!";
                _resultStyle = "danger";
                _points--;
                break;
            case GameState.Draw:
                _gameResultMessage = "DRAW!";
                _resultStyle = "primary";
                break;
        }
    }

    void ResetGame()
    {
        _timer.Start();
        _gameResultMessage = string.Empty;
        _resultStyle = string.Empty; 
    }

    public void Dispose()
    {
        if (_timer != null)
        {
            _timer?.Dispose();
        }
    }
}