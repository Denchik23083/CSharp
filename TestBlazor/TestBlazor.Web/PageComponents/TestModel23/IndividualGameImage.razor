@inject IGameImageService _service
@inject NavigationManager _manager

<div class="col-sm-12 col-md-4 p-3 text-center">
    <div class="game-name">
        <a href="@_url">@Game.Name</a>
    </div>

    <hr class="hrfix"/>

    <div class="card-image">
        <a href="@_url">
            @if (IsBase64(Game.Image))
            {
                <img src="data:image/jpeg;base64,@Game.Image" class="game-image"/>
            }
            else
            {
                <img src="@Game.Image" alt="@Game.Name" class="game-image"/>
            }
        </a>
    </div>
    <hr class="hrfix"/>

    <div class="game-card-footer">
        <div class="btn-group my-3 text-center" role="group">
            <a href="@_urlEdit" class="btn btn-outline-info"><i class="fa-solid fa-pen-to-square"></i></a>
            <button type="button" class="btn btn-outline-danger" @onclick="Remove"><i class="fa-solid fa-trash-can"></i></button>
        </div>
    </div>
</div>

@code {
    [Parameter] public GameImage Game { get; set; }

    string _url = string.Empty;
    string _urlEdit = string.Empty;

    protected override void OnInitialized()
    {
        _url = $"games/{Game.Id}/{Game.Name.Replace(" ", "-" )}";
        _urlEdit = $"games/edit/{Game.Id}";
    }

    void Remove()
    {
        var result = _service.Remove(Game);

        if (result)
        {
            _manager.NavigateTo("/games");
        }
    }

    bool IsBase64(string value)
    {
        value = value.Trim();
        return ((value.Length % 4 == 0) && Regex.IsMatch(value, @"^[a-zA-Z0-9\+/]*={0,3}$", RegexOptions.None));
    }
}
